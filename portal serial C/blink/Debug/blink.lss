
blink.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001a6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000152  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001a6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001d8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  00000218  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007f4  00000000  00000000  00000258  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000702  00000000  00000000  00000a4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000031f  00000000  00000000  0000114e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000064  00000000  00000000  00001470  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003be  00000000  00000000  000014d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000069  00000000  00000000  00001892  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  000018fb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 70 00 	call	0xe0	; 0xe0 <main>
  78:	0c 94 a7 00 	jmp	0x14e	; 0x14e <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <config_adc>:
#include <avr/io.h>
#include <util/delay.h>
#include "minha_lib.h"

void config_adc(){
	ADCSRA = 0x87;
  80:	87 e8       	ldi	r24, 0x87	; 135
  82:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  86:	08 95       	ret

00000088 <converte_adc>:
}

unsigned int converte_adc(){
	//ADMUX = 0x44; referência 5V
	ADMUX = 0xC4;
  88:	84 ec       	ldi	r24, 0xC4	; 196
  8a:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  8e:	85 e3       	ldi	r24, 0x35	; 53
  90:	8a 95       	dec	r24
  92:	f1 f7       	brne	.-4      	; 0x90 <converte_adc+0x8>
  94:	00 00       	nop
	_delay_us(10);
	setbit(ADCSRA, 6);
  96:	ea e7       	ldi	r30, 0x7A	; 122
  98:	f0 e0       	ldi	r31, 0x00	; 0
  9a:	80 81       	ld	r24, Z
  9c:	80 64       	ori	r24, 0x40	; 64
  9e:	80 83       	st	Z, r24
	while(getbit(ADCSRA, 6)==1){}
  a0:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  a4:	86 fd       	sbrc	r24, 6
  a6:	fc cf       	rjmp	.-8      	; 0xa0 <converte_adc+0x18>
	return ADC;
  a8:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
  ac:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
}
  b0:	08 95       	ret

000000b2 <config_1200_8_n_1>:

void config_1200_8_n_1(){
	UBRR0H = 0x3;
  b2:	83 e0       	ldi	r24, 0x03	; 3
  b4:	80 93 c5 00 	sts	0x00C5, r24	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = 0x40;
  b8:	80 e4       	ldi	r24, 0x40	; 64
  ba:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	UCSR0C = 0x06;
  be:	86 e0       	ldi	r24, 0x06	; 6
  c0:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
	UCSR0B = 0x18;
  c4:	88 e1       	ldi	r24, 0x18	; 24
  c6:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	UCSR0A = 0x20;
  ca:	80 e2       	ldi	r24, 0x20	; 32
  cc:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  d0:	08 95       	ret

000000d2 <tx>:
}

void tx(char c){
	while(getbit(UCSR0A, 5) == 0){
  d2:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  d6:	95 ff       	sbrs	r25, 5
  d8:	fc cf       	rjmp	.-8      	; 0xd2 <tx>
	}
	UDR0 = c;
  da:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
  de:	08 95       	ret

000000e0 <main>:
}



int main(void){
	config_1200_8_n_1();
  e0:	0e 94 59 00 	call	0xb2	; 0xb2 <config_1200_8_n_1>
	config_adc();
  e4:	0e 94 40 00 	call	0x80	; 0x80 <config_adc>
	setbit(DDRB,5);
  e8:	84 b1       	in	r24, 0x04	; 4
  ea:	80 62       	ori	r24, 0x20	; 32
  ec:	84 b9       	out	0x04, r24	; 4
    while (1){
		unsigned int num_carrapichos = (converte_adc()*120)/1023;
  ee:	0e 94 44 00 	call	0x88	; 0x88 <converte_adc>
  f2:	28 e7       	ldi	r18, 0x78	; 120
  f4:	ac 01       	movw	r20, r24
  f6:	24 9f       	mul	r18, r20
  f8:	c0 01       	movw	r24, r0
  fa:	25 9f       	mul	r18, r21
  fc:	90 0d       	add	r25, r0
  fe:	11 24       	eor	r1, r1
 100:	6f ef       	ldi	r22, 0xFF	; 255
 102:	73 e0       	ldi	r23, 0x03	; 3
 104:	0e 94 93 00 	call	0x126	; 0x126 <__udivmodhi4>
 108:	8b 01       	movw	r16, r22
		for(int x=0; x<num_carrapichos;x++){
 10a:	c0 e0       	ldi	r28, 0x00	; 0
 10c:	d0 e0       	ldi	r29, 0x00	; 0
 10e:	04 c0       	rjmp	.+8      	; 0x118 <main+0x38>
			tx('*');
 110:	8a e2       	ldi	r24, 0x2A	; 42
 112:	0e 94 69 00 	call	0xd2	; 0xd2 <tx>
	config_1200_8_n_1();
	config_adc();
	setbit(DDRB,5);
    while (1){
		unsigned int num_carrapichos = (converte_adc()*120)/1023;
		for(int x=0; x<num_carrapichos;x++){
 116:	21 96       	adiw	r28, 0x01	; 1
 118:	c0 17       	cp	r28, r16
 11a:	d1 07       	cpc	r29, r17
 11c:	c8 f3       	brcs	.-14     	; 0x110 <main+0x30>
			tx('*');
		}
		tx('\n');
 11e:	8a e0       	ldi	r24, 0x0A	; 10
 120:	0e 94 69 00 	call	0xd2	; 0xd2 <tx>
//		setbit(PORTB,5);
//		tx((converte_adc()>>2));
//		_delay_ms(500);
//		clrbit(PORTB,5);
//		_delay_ms(500);
    }
 124:	e4 cf       	rjmp	.-56     	; 0xee <main+0xe>

00000126 <__udivmodhi4>:
 126:	aa 1b       	sub	r26, r26
 128:	bb 1b       	sub	r27, r27
 12a:	51 e1       	ldi	r21, 0x11	; 17
 12c:	07 c0       	rjmp	.+14     	; 0x13c <__udivmodhi4_ep>

0000012e <__udivmodhi4_loop>:
 12e:	aa 1f       	adc	r26, r26
 130:	bb 1f       	adc	r27, r27
 132:	a6 17       	cp	r26, r22
 134:	b7 07       	cpc	r27, r23
 136:	10 f0       	brcs	.+4      	; 0x13c <__udivmodhi4_ep>
 138:	a6 1b       	sub	r26, r22
 13a:	b7 0b       	sbc	r27, r23

0000013c <__udivmodhi4_ep>:
 13c:	88 1f       	adc	r24, r24
 13e:	99 1f       	adc	r25, r25
 140:	5a 95       	dec	r21
 142:	a9 f7       	brne	.-22     	; 0x12e <__udivmodhi4_loop>
 144:	80 95       	com	r24
 146:	90 95       	com	r25
 148:	bc 01       	movw	r22, r24
 14a:	cd 01       	movw	r24, r26
 14c:	08 95       	ret

0000014e <_exit>:
 14e:	f8 94       	cli

00000150 <__stop_program>:
 150:	ff cf       	rjmp	.-2      	; 0x150 <__stop_program>
