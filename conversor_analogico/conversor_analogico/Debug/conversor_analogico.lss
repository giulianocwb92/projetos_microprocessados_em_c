
conversor_analogico.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000009a  00800100  00000230  000002a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000230  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000033e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000370  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000068  00000000  00000000  000003b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000985  00000000  00000000  00000418  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000079f  00000000  00000000  00000d9d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000439  00000000  00000000  0000153c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000d8  00000000  00000000  00001978  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000047d  00000000  00000000  00001a50  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000159  00000000  00000000  00001ecd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000058  00000000  00000000  00002026  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e3       	ldi	r30, 0x30	; 48
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 39       	cpi	r26, 0x9A	; 154
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <main>
  8e:	0c 94 16 01 	jmp	0x22c	; 0x22c <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <config_57600_8_n_1>:
void config_57600_8_n_1(){
	UBRR0H = 0x00;
  96:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = 0x22;
  9a:	82 e2       	ldi	r24, 0x22	; 34
  9c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	UCSR0C = 0x06;
  a0:	96 e0       	ldi	r25, 0x06	; 6
  a2:	90 93 c2 00 	sts	0x00C2, r25	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
	UCSR0B = 0x18;
  a6:	98 e1       	ldi	r25, 0x18	; 24
  a8:	90 93 c1 00 	sts	0x00C1, r25	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	UCSR0A = 0x22;
  ac:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  b0:	08 95       	ret

000000b2 <config_ADCSRA>:
}

void config_ADCSRA(){
	ADCSRA = 0x87;
  b2:	87 e8       	ldi	r24, 0x87	; 135
  b4:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  b8:	08 95       	ret

000000ba <tx>:
void tx(char c){
	while(getbit(UCSR0A,5)==0){}
  ba:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  be:	95 ff       	sbrs	r25, 5
  c0:	fc cf       	rjmp	.-8      	; 0xba <tx>
	UDR0 = c;
  c2:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
  c6:	08 95       	ret

000000c8 <rx>:
}

char rx(){
	while(getbit(UCSR0A,7)==0){}
  c8:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  cc:	88 23       	and	r24, r24
  ce:	e4 f7       	brge	.-8      	; 0xc8 <rx>
	return UDR0;
  d0:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
  d4:	08 95       	ret

000000d6 <string_transmit>:
void string_transmit(char* data){
  d6:	0f 93       	push	r16
  d8:	1f 93       	push	r17
  da:	cf 93       	push	r28
  dc:	df 93       	push	r29
  de:	8c 01       	movw	r16, r24
	int x = 0;
  e0:	c0 e0       	ldi	r28, 0x00	; 0
  e2:	d0 e0       	ldi	r29, 0x00	; 0
	while (data[x] != '\0'){
  e4:	03 c0       	rjmp	.+6      	; 0xec <string_transmit+0x16>
		tx(data[x]);
  e6:	0e 94 5d 00 	call	0xba	; 0xba <tx>
		x++;
  ea:	21 96       	adiw	r28, 0x01	; 1
void string_transmit(char* data){
	int x = 0;
	while (data[x] != '\0'){
  ec:	f8 01       	movw	r30, r16
  ee:	ec 0f       	add	r30, r28
  f0:	fd 1f       	adc	r31, r29
  f2:	80 81       	ld	r24, Z
  f4:	81 11       	cpse	r24, r1
  f6:	f7 cf       	rjmp	.-18     	; 0xe6 <string_transmit+0x10>
		tx(data[x]);
		x++;
	}
}
  f8:	df 91       	pop	r29
  fa:	cf 91       	pop	r28
  fc:	1f 91       	pop	r17
  fe:	0f 91       	pop	r16
 100:	08 95       	ret

00000102 <welcome_message>:
void welcome_message(){
 102:	cf 93       	push	r28
 104:	df 93       	push	r29
 106:	cd b7       	in	r28, 0x3d	; 61
 108:	de b7       	in	r29, 0x3e	; 62
 10a:	c8 57       	subi	r28, 0x78	; 120
 10c:	d1 09       	sbc	r29, r1
 10e:	0f b6       	in	r0, 0x3f	; 63
 110:	f8 94       	cli
 112:	de bf       	out	0x3e, r29	; 62
 114:	0f be       	out	0x3f, r0	; 63
 116:	cd bf       	out	0x3d, r28	; 61
	char mensagem[40] = "Selecione uma opcao:\n";
 118:	86 e1       	ldi	r24, 0x16	; 22
 11a:	e0 e0       	ldi	r30, 0x00	; 0
 11c:	f1 e0       	ldi	r31, 0x01	; 1
 11e:	de 01       	movw	r26, r28
 120:	11 96       	adiw	r26, 0x01	; 1
 122:	01 90       	ld	r0, Z+
 124:	0d 92       	st	X+, r0
 126:	8a 95       	dec	r24
 128:	e1 f7       	brne	.-8      	; 0x122 <welcome_message+0x20>
 12a:	fe 01       	movw	r30, r28
 12c:	77 96       	adiw	r30, 0x17	; 23
 12e:	82 e1       	ldi	r24, 0x12	; 18
 130:	df 01       	movw	r26, r30
 132:	1d 92       	st	X+, r1
 134:	8a 95       	dec	r24
 136:	e9 f7       	brne	.-6      	; 0x132 <welcome_message+0x30>
	char opcao_1[40]  = "1 - Medir temperatura (LM35)\n";
 138:	8e e1       	ldi	r24, 0x1E	; 30
 13a:	e8 e2       	ldi	r30, 0x28	; 40
 13c:	f1 e0       	ldi	r31, 0x01	; 1
 13e:	de 01       	movw	r26, r28
 140:	99 96       	adiw	r26, 0x29	; 41
 142:	01 90       	ld	r0, Z+
 144:	0d 92       	st	X+, r0
 146:	8a 95       	dec	r24
 148:	e1 f7       	brne	.-8      	; 0x142 <welcome_message+0x40>
 14a:	fe 01       	movw	r30, r28
 14c:	e9 5b       	subi	r30, 0xB9	; 185
 14e:	ff 4f       	sbci	r31, 0xFF	; 255
 150:	8a e0       	ldi	r24, 0x0A	; 10
 152:	df 01       	movw	r26, r30
 154:	1d 92       	st	X+, r1
 156:	8a 95       	dec	r24
 158:	e9 f7       	brne	.-6      	; 0x154 <welcome_message+0x52>
	char opcao_2[40]  = "2 - Medir tensão (Potenciômetro)\n";
 15a:	82 e2       	ldi	r24, 0x22	; 34
 15c:	e0 e5       	ldi	r30, 0x50	; 80
 15e:	f1 e0       	ldi	r31, 0x01	; 1
 160:	de 01       	movw	r26, r28
 162:	af 5a       	subi	r26, 0xAF	; 175
 164:	bf 4f       	sbci	r27, 0xFF	; 255
 166:	01 90       	ld	r0, Z+
 168:	0d 92       	st	X+, r0
 16a:	8a 95       	dec	r24
 16c:	e1 f7       	brne	.-8      	; 0x166 <welcome_message+0x64>
 16e:	e1 e5       	ldi	r30, 0x51	; 81
 170:	f0 e0       	ldi	r31, 0x00	; 0
 172:	ec 0f       	add	r30, r28
 174:	fd 1f       	adc	r31, r29
 176:	b2 96       	adiw	r30, 0x22	; 34
 178:	86 e0       	ldi	r24, 0x06	; 6
 17a:	df 01       	movw	r26, r30
 17c:	1d 92       	st	X+, r1
 17e:	8a 95       	dec	r24
 180:	e9 f7       	brne	.-6      	; 0x17c <welcome_message+0x7a>
	string_transmit(mensagem);
 182:	ce 01       	movw	r24, r28
 184:	01 96       	adiw	r24, 0x01	; 1
 186:	0e 94 6b 00 	call	0xd6	; 0xd6 <string_transmit>
	string_transmit(opcao_1);
 18a:	ce 01       	movw	r24, r28
 18c:	89 96       	adiw	r24, 0x29	; 41
 18e:	0e 94 6b 00 	call	0xd6	; 0xd6 <string_transmit>
	string_transmit(opcao_2);
 192:	ce 01       	movw	r24, r28
 194:	8f 5a       	subi	r24, 0xAF	; 175
 196:	9f 4f       	sbci	r25, 0xFF	; 255
 198:	0e 94 6b 00 	call	0xd6	; 0xd6 <string_transmit>
 19c:	c8 58       	subi	r28, 0x88	; 136
 19e:	df 4f       	sbci	r29, 0xFF	; 255
 1a0:	0f b6       	in	r0, 0x3f	; 63
 1a2:	f8 94       	cli
 1a4:	de bf       	out	0x3e, r29	; 62
 1a6:	0f be       	out	0x3f, r0	; 63
 1a8:	cd bf       	out	0x3d, r28	; 61
 1aa:	df 91       	pop	r29
 1ac:	cf 91       	pop	r28
 1ae:	08 95       	ret

000001b0 <set_conversor_A0>:
void set_conversor_A0(){
	ADMUX = 0xC0;
 1b0:	80 ec       	ldi	r24, 0xC0	; 192
 1b2:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
 1b6:	08 95       	ret

000001b8 <set_conversor_A1>:
}

void set_conversor_A1(){
	ADMUX = 0x41;
 1b8:	81 e4       	ldi	r24, 0x41	; 65
 1ba:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
 1be:	08 95       	ret

000001c0 <converte_adc>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1c0:	85 e3       	ldi	r24, 0x35	; 53
 1c2:	8a 95       	dec	r24
 1c4:	f1 f7       	brne	.-4      	; 0x1c2 <converte_adc+0x2>
 1c6:	00 00       	nop
}

unsigned int converte_adc(){
	_delay_us(10);
	setbit(ADCSRA, 6);
 1c8:	ea e7       	ldi	r30, 0x7A	; 122
 1ca:	f0 e0       	ldi	r31, 0x00	; 0
 1cc:	80 81       	ld	r24, Z
 1ce:	80 64       	ori	r24, 0x40	; 64
 1d0:	80 83       	st	Z, r24
	while(getbit(ADCSRA, 6)==1){}
 1d2:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 1d6:	86 fd       	sbrc	r24, 6
 1d8:	fc cf       	rjmp	.-8      	; 0x1d2 <converte_adc+0x12>
	return ADC;
 1da:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 1de:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
}
 1e2:	08 95       	ret

000001e4 <main>:
#include "welcome_message.h"
#include "conversor.h"

int main(void)
{
	config_57600_8_n_1();
 1e4:	0e 94 4b 00 	call	0x96	; 0x96 <config_57600_8_n_1>
	config_ADCSRA();
 1e8:	0e 94 59 00 	call	0xb2	; 0xb2 <config_ADCSRA>
    while (1){
		welcome_message();
 1ec:	0e 94 81 00 	call	0x102	; 0x102 <welcome_message>
		char opcao = rx();
 1f0:	0e 94 64 00 	call	0xc8	; 0xc8 <rx>
		switch(opcao){
 1f4:	81 33       	cpi	r24, 0x31	; 49
 1f6:	19 f0       	breq	.+6      	; 0x1fe <main+0x1a>
 1f8:	82 33       	cpi	r24, 0x32	; 50
 1fa:	51 f0       	breq	.+20     	; 0x210 <main+0x2c>
 1fc:	12 c0       	rjmp	.+36     	; 0x222 <main+0x3e>
			case '1':
				set_conversor_A0();
 1fe:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <set_conversor_A0>
				unsigned int reading_A0 = converte_adc();
 202:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <converte_adc>
				string_transmit("opcao 1\n");
 206:	88 e7       	ldi	r24, 0x78	; 120
 208:	91 e0       	ldi	r25, 0x01	; 1
 20a:	0e 94 6b 00 	call	0xd6	; 0xd6 <string_transmit>
				break;
 20e:	ee cf       	rjmp	.-36     	; 0x1ec <main+0x8>
			case '2':
				set_conversor_A1();
 210:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <set_conversor_A1>
				unsigned int reading_A1 = converte_adc();
 214:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <converte_adc>
				string_transmit("opcao 2\n");
 218:	81 e8       	ldi	r24, 0x81	; 129
 21a:	91 e0       	ldi	r25, 0x01	; 1
 21c:	0e 94 6b 00 	call	0xd6	; 0xd6 <string_transmit>
				break;
 220:	e5 cf       	rjmp	.-54     	; 0x1ec <main+0x8>
			default:
				string_transmit("opcao invalida\n");
 222:	8a e8       	ldi	r24, 0x8A	; 138
 224:	91 e0       	ldi	r25, 0x01	; 1
 226:	0e 94 6b 00 	call	0xd6	; 0xd6 <string_transmit>
				break;	
 22a:	e0 cf       	rjmp	.-64     	; 0x1ec <main+0x8>

0000022c <_exit>:
 22c:	f8 94       	cli

0000022e <__stop_program>:
 22e:	ff cf       	rjmp	.-2      	; 0x22e <__stop_program>
