
conversor_analogico.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000078  00800100  000001ae  00000222  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001ae  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000029a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002cc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  0000030c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007f8  00000000  00000000  00000354  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006ef  00000000  00000000  00000b4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002fd  00000000  00000000  0000123b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000098  00000000  00000000  00001538  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003df  00000000  00000000  000015d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000eb  00000000  00000000  000019af  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00001a9a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee ea       	ldi	r30, 0xAE	; 174
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 37       	cpi	r26, 0x78	; 120
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 81 00 	call	0x102	; 0x102 <main>
  8e:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <config_57600_8_n_1>:
void config_57600_8_n_1(){
	UBRR0H = 0x00;
  96:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = 0x22;
  9a:	82 e2       	ldi	r24, 0x22	; 34
  9c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	UCSR0C = 0x06;
  a0:	96 e0       	ldi	r25, 0x06	; 6
  a2:	90 93 c2 00 	sts	0x00C2, r25	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
	UCSR0B = 0x18;
  a6:	98 e1       	ldi	r25, 0x18	; 24
  a8:	90 93 c1 00 	sts	0x00C1, r25	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	UCSR0A = 0x22;
  ac:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  b0:	08 95       	ret

000000b2 <config_ADCSRA>:
}

void config_ADCSRA(){
	ADCSRA = 0x87;
  b2:	87 e8       	ldi	r24, 0x87	; 135
  b4:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  b8:	08 95       	ret

000000ba <tx>:
void tx(char c){
	while(getbit(UCSR0A,5)==0){}
  ba:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  be:	95 ff       	sbrs	r25, 5
  c0:	fc cf       	rjmp	.-8      	; 0xba <tx>
	UDR0 = c;
  c2:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
  c6:	08 95       	ret

000000c8 <rx>:
}

char rx(){
	while(getbit(UCSR0A,7)==0){}
  c8:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  cc:	88 23       	and	r24, r24
  ce:	e4 f7       	brge	.-8      	; 0xc8 <rx>
	return UDR0;
  d0:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
  d4:	08 95       	ret

000000d6 <string_transmit>:
void string_transmit(char* data){
  d6:	0f 93       	push	r16
  d8:	1f 93       	push	r17
  da:	cf 93       	push	r28
  dc:	df 93       	push	r29
  de:	8c 01       	movw	r16, r24
	int x = 0;
  e0:	c0 e0       	ldi	r28, 0x00	; 0
  e2:	d0 e0       	ldi	r29, 0x00	; 0
	while (data[x] != '\0'){
  e4:	03 c0       	rjmp	.+6      	; 0xec <string_transmit+0x16>
		tx(data[x]);
  e6:	0e 94 5d 00 	call	0xba	; 0xba <tx>
		x++;
  ea:	21 96       	adiw	r28, 0x01	; 1
void string_transmit(char* data){
	int x = 0;
	while (data[x] != '\0'){
  ec:	f8 01       	movw	r30, r16
  ee:	ec 0f       	add	r30, r28
  f0:	fd 1f       	adc	r31, r29
  f2:	80 81       	ld	r24, Z
  f4:	81 11       	cpse	r24, r1
  f6:	f7 cf       	rjmp	.-18     	; 0xe6 <string_transmit+0x10>
		tx(data[x]);
		x++;
	}
}
  f8:	df 91       	pop	r29
  fa:	cf 91       	pop	r28
  fc:	1f 91       	pop	r17
  fe:	0f 91       	pop	r16
 100:	08 95       	ret

00000102 <main>:
#include "serial.h"
#include "tx_rx.h"
#include "string_transmit.h"

int main(void)
{
 102:	cf 93       	push	r28
 104:	df 93       	push	r29
 106:	cd b7       	in	r28, 0x3d	; 61
 108:	de b7       	in	r29, 0x3e	; 62
 10a:	c8 57       	subi	r28, 0x78	; 120
 10c:	d1 09       	sbc	r29, r1
 10e:	0f b6       	in	r0, 0x3f	; 63
 110:	f8 94       	cli
 112:	de bf       	out	0x3e, r29	; 62
 114:	0f be       	out	0x3f, r0	; 63
 116:	cd bf       	out	0x3d, r28	; 61
	config_57600_8_n_1();
 118:	0e 94 4b 00 	call	0x96	; 0x96 <config_57600_8_n_1>
	config_ADCSRA();
 11c:	0e 94 59 00 	call	0xb2	; 0xb2 <config_ADCSRA>
    char mensagem[40] = "Selecione uma opcao:\n";
 120:	86 e1       	ldi	r24, 0x16	; 22
 122:	e0 e0       	ldi	r30, 0x00	; 0
 124:	f1 e0       	ldi	r31, 0x01	; 1
 126:	de 01       	movw	r26, r28
 128:	11 96       	adiw	r26, 0x01	; 1
 12a:	01 90       	ld	r0, Z+
 12c:	0d 92       	st	X+, r0
 12e:	8a 95       	dec	r24
 130:	e1 f7       	brne	.-8      	; 0x12a <main+0x28>
 132:	fe 01       	movw	r30, r28
 134:	77 96       	adiw	r30, 0x17	; 23
 136:	82 e1       	ldi	r24, 0x12	; 18
 138:	df 01       	movw	r26, r30
 13a:	1d 92       	st	X+, r1
 13c:	8a 95       	dec	r24
 13e:	e9 f7       	brne	.-6      	; 0x13a <main+0x38>
	char opcao_1[40]  = "1 - Medir temperatura (LM35)\n";
 140:	8e e1       	ldi	r24, 0x1E	; 30
 142:	e8 e2       	ldi	r30, 0x28	; 40
 144:	f1 e0       	ldi	r31, 0x01	; 1
 146:	de 01       	movw	r26, r28
 148:	99 96       	adiw	r26, 0x29	; 41
 14a:	01 90       	ld	r0, Z+
 14c:	0d 92       	st	X+, r0
 14e:	8a 95       	dec	r24
 150:	e1 f7       	brne	.-8      	; 0x14a <main+0x48>
 152:	fe 01       	movw	r30, r28
 154:	e9 5b       	subi	r30, 0xB9	; 185
 156:	ff 4f       	sbci	r31, 0xFF	; 255
 158:	8a e0       	ldi	r24, 0x0A	; 10
 15a:	df 01       	movw	r26, r30
 15c:	1d 92       	st	X+, r1
 15e:	8a 95       	dec	r24
 160:	e9 f7       	brne	.-6      	; 0x15c <main+0x5a>
	char opcao_2[40]  = "2 - Medir tensão (Potenciômetro)\n";
 162:	82 e2       	ldi	r24, 0x22	; 34
 164:	e0 e5       	ldi	r30, 0x50	; 80
 166:	f1 e0       	ldi	r31, 0x01	; 1
 168:	de 01       	movw	r26, r28
 16a:	af 5a       	subi	r26, 0xAF	; 175
 16c:	bf 4f       	sbci	r27, 0xFF	; 255
 16e:	01 90       	ld	r0, Z+
 170:	0d 92       	st	X+, r0
 172:	8a 95       	dec	r24
 174:	e1 f7       	brne	.-8      	; 0x16e <main+0x6c>
 176:	e1 e5       	ldi	r30, 0x51	; 81
 178:	f0 e0       	ldi	r31, 0x00	; 0
 17a:	ec 0f       	add	r30, r28
 17c:	fd 1f       	adc	r31, r29
 17e:	b2 96       	adiw	r30, 0x22	; 34
 180:	86 e0       	ldi	r24, 0x06	; 6
 182:	df 01       	movw	r26, r30
 184:	1d 92       	st	X+, r1
 186:	8a 95       	dec	r24
 188:	e9 f7       	brne	.-6      	; 0x184 <main+0x82>
    while (1){
		string_transmit(mensagem);
 18a:	ce 01       	movw	r24, r28
 18c:	01 96       	adiw	r24, 0x01	; 1
 18e:	0e 94 6b 00 	call	0xd6	; 0xd6 <string_transmit>
		string_transmit(opcao_1);
 192:	ce 01       	movw	r24, r28
 194:	89 96       	adiw	r24, 0x29	; 41
 196:	0e 94 6b 00 	call	0xd6	; 0xd6 <string_transmit>
		string_transmit(opcao_2);
 19a:	ce 01       	movw	r24, r28
 19c:	8f 5a       	subi	r24, 0xAF	; 175
 19e:	9f 4f       	sbci	r25, 0xFF	; 255
 1a0:	0e 94 6b 00 	call	0xd6	; 0xd6 <string_transmit>
		char opcao = rx();
 1a4:	0e 94 64 00 	call	0xc8	; 0xc8 <rx>
 1a8:	f0 cf       	rjmp	.-32     	; 0x18a <main+0x88>

000001aa <_exit>:
 1aa:	f8 94       	cli

000001ac <__stop_program>:
 1ac:	ff cf       	rjmp	.-2      	; 0x1ac <__stop_program>
